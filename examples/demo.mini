// Imports and namespace resolution via `::` operator
import fmt::println;
import math::sqrt;

struct Point2D {
    x: int;
    y: int;
};

func Point2D::Euclidean(self, const other: *Point2D) -> int {
    // The `.` operator automatically dereferences the pointer
    dx := (other.x - self.x) ** 2;
    dy := (other.y - self.y) ** 2;
    return sqrt(dx + dy);
}

// The above method is syntactic sugar for the following function:
func point2d_euclidean(const self: *Point2D, const other: *Point2D) -> int { ... }

enum Color : u8 {
    Red,
    Green,
    Blue,
};

interface Greeter {
    func greet();
};

struct Person {
    name: String;
    age: u8;
    favorite_color: Color;
};

// Fulfills the Greeter interface
func Person::greet() {
    println("Hello, my name is {}. I'm {} years old, and my favorite color is {}.",
        self.name, self.age, self.favorite_color);
}

func main() {
    // `auto` keyword infers the type of the variable from the assignment expression
    p1 := Point2D{x: 1, y: 2};
    p2 := Point2D{x: 3, y: 4};
    dist := p1.Euclidean(p2);
    println("Distance between {} and {} = {}", p1, p2, dist);
    return 0;
}
